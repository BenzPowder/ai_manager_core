// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener("DOMContentLoaded", () => {
    console.log("üîπ DOM Loaded");
    setupCreateAgentForm();
    setupWebhookHandlers();
    setupEditAgentForm();
    loadAgentsList(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î AI Agents ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á Agent
function setupCreateAgentForm() {
    const form = document.getElementById("createAgentForm");
    if (!form) {
        console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° createAgentForm");
        return;
    }
    form.addEventListener("submit", handleCreateAgentSubmit);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
async function handleCreateAgentSubmit(event) {
    event.preventDefault();
    console.log("üîπ Form submitted");

    const formData = {
        agent_name: document.getElementById("agent_name")?.value?.trim() || "",
        agent_type: document.getElementById("agent_type")?.value || "",
        prompt_template: document.getElementById("prompt_template")?.value?.trim() || ""
    };

    console.log("üîπ Form Data:", formData);

    if (!formData.agent_name || !formData.agent_type || !formData.prompt_template) {
        alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á");
        return;
    }

    try {
        const response = await fetch("/api/agents/create", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(formData)
        });

        const data = await response.json();
        console.log("‚úÖ Response:", data);

        if (data.message) {
            alert("‚úÖ " + data.message);
            setTimeout(() => window.location.href = "/", 2000);
        } else {
            alert("‚ùå " + data.error);
        }
    } catch (error) {
        console.error("‚ùå Error:", error);
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Agent
function setupEditAgentForm() {
    const form = document.getElementById("editAgentForm");
    if (form) {
        form.addEventListener("submit", function(event) {
            event.preventDefault();
            const agentId = form.getAttribute("data-agent-id");
            handleEditAgentSubmit(event, agentId);
        });
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Agent
async function handleEditAgentSubmit(event, agentId) {
    event.preventDefault();
    
    const formData = {
        agent_name: document.getElementById("agent_name")?.value?.trim() || "",
        agent_type: document.getElementById("agent_type")?.value || "",
        prompt_template: document.getElementById("prompt_template")?.value?.trim() || ""
    };

    if (!formData.agent_name || !formData.agent_type || !formData.prompt_template) {
        alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á");
        return;
    }

    try {
        const response = await fetch(`/api/agents/update/${agentId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (data.message) {
            alert("‚úÖ " + data.message);
            window.location.href = "/";
        } else {
            alert("‚ùå " + data.error);
        }
    } catch (error) {
        console.error("‚ùå Error:", error);
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö Agent
function deleteAgent(agentId) {
    console.log("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö Agent:", agentId);
    
    if (!confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö Agent ‡∏ô‡∏µ‡πâ?")) {
        return;
    }

    fetch(`/api/agents/delete/${agentId}`, {
        method: "DELETE"
    })
    .then(response => {
        if (!response.ok) {
            throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Agent");
        }
        return response.json();
    })
    .then(data => {
        console.log("‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏ö:", data);
        alert("‚úÖ ‡∏•‡∏ö Agent ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        location.reload();
    })
    .catch(error => {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message);
    });
}

// ‡πÅ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Webhook
function setupWebhookHandlers() {
    const webhookForm = document.getElementById("webhookForm");
    if (webhookForm) {
        webhookForm.addEventListener("submit", handleWebhookSubmit);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Webhook
async function handleWebhookSubmit(event) {
    event.preventDefault();
    console.log("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Webhook");

    const agency_name = document.getElementById("agency_name")?.value?.trim() || "";
    const sub_agent = document.getElementById("sub_agent")?.value?.trim() || "";
    const loadingOverlay = document.getElementById("loadingOverlay");
    const successDialog = document.getElementById("successDialog");
    const webhookUrlInput = document.getElementById("webhookUrl");

    if (!agency_name || !sub_agent) {
        showAlert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
        return;
    }

    try {
        loadingOverlay.classList.remove("hidden");
        loadingOverlay.classList.add("flex");

        const response = await fetch('/api/webhooks/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                agency_name,
                sub_agent
            })
        });

        const data = await response.json();
        console.log("‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Webhook:", data);

        if (response.ok) {
            loadingOverlay.classList.add("hidden");
            loadingOverlay.classList.remove("flex");

            // ‡πÅ‡∏™‡∏î‡∏á Success Dialog ‡∏û‡∏£‡πâ‡∏≠‡∏° Webhook URL
            webhookUrlInput.value = window.location.origin + data.webhook_url;
            successDialog.classList.remove("hidden");
            successDialog.classList.add("flex");
        } else {
            throw new Error(data.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Webhook");
        }
    } catch (error) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
        showAlert("‚ùå " + error.message);
        
        loadingOverlay.classList.add("hidden");
        loadingOverlay.classList.remove("flex");
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ AI Agents
async function loadAgentsList() {
    try {
        const response = await fetch('/api/agents'); // ‚úÖ ‡πÉ‡∏ä‡πâ API ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const agents = await response.json();

        console.log("‚úÖ AI Agents Loaded:", agents);

        const selectElement = document.getElementById('sub_agent');
        if (!selectElement) {
            console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö element sub_agent");
            return;
        }

        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏°
        selectElement.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å AI Agent</option>';

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà
        agents.forEach(agent => {
            const option = document.createElement('option');
            option.value = agent.agent_name; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ Agent ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤
            option.textContent = agent.agent_name;
            selectElement.appendChild(option);
        });

    } catch (error) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ AI Agents:", error);
        showAlert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ AI Agents");
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö Webhook
function deleteWebhook(webhookId) {
    if (!confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö Webhook ‡∏ô‡∏µ‡πâ?")) {
        return;
    }

    fetch(`/api/webhooks/delete/${webhookId}`, {
        method: "DELETE"
    })
    .then(response => {
        if (!response.ok) {
            throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Webhook");
        }
        return response.json();
    })
    .then(data => {
        console.log("‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏ö:", data);
        alert("‚úÖ ‡∏•‡∏ö Webhook ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        location.reload();
    })
    .catch(error => {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message);
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Webhook
function toggleWebhookStatus(webhookId, currentStatus) {
    fetch(`/api/webhooks/toggle/${webhookId}`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            is_active: !currentStatus
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Webhook");
        }
        return response.json();
    })
    .then(data => {
        console.log("‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", data);
        location.reload();
    })
    .catch(error => {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message);
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Webhook URL
function copyToClipboard(text) {
    navigator.clipboard.writeText(text)
        .then(() => {
            alert("‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Webhook URL ‡πÅ‡∏•‡πâ‡∏ß");
        })
        .catch(error => {
            console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å:", error);
            alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å URL ‡πÑ‡∏î‡πâ");
        });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Webhook URL
function copyWebhookUrl() {
    const webhookUrl = document.getElementById("webhookUrl");
    webhookUrl.select();
    document.execCommand('copy');
    showAlert("‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Webhook URL ‡πÅ‡∏•‡πâ‡∏ß");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î Success Dialog
function closeSuccessDialog() {
    const successDialog = document.getElementById("successDialog");
    successDialog.classList.add("hidden");
    successDialog.classList.remove("flex");
    window.location.href = "/";  // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ dashboard
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Alert
function showAlert(message) {
    const alert = document.getElementById("alert");
    const alertMessage = document.getElementById("alertMessage");
    
    alertMessage.textContent = message;
    alert.classList.remove("hidden");
    alert.classList.add("flex");
    
    setTimeout(() => {
        alert.classList.add("hidden");
        alert.classList.remove("flex");
    }, 3000);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö generate webhook URL
async function generateWebhookUrl() {
    try {
        const response = await fetch('/generate_webhook_url');
        const data = await response.json();
        const webhookInput = document.getElementById("webhook_url");
        if (webhookInput) {
            webhookInput.value = data.webhook_url;
        }
    } catch (error) {
        console.error("‚ùå Error generating webhook URL:", error);
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Webhook URL");
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å webhook URL
async function copyWebhookUrl() {
    const webhookInput = document.getElementById("webhook_url");
    if (webhookInput?.value) {
        try {
            await navigator.clipboard.writeText(webhookInput.value);
            alert("‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Webhook URL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        } catch (error) {
            console.error("‚ùå Error copying webhook URL:", error);
            alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å URL");
        }
    }
}
