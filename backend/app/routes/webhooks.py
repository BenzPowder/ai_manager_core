from flask import Blueprint, request, jsonify, render_template
import uuid
import logging
import json
import os
import requests
from datetime import datetime
from linebot import LineBotApi
from linebot.models import TextSendMessage
from ..database.db_connection import get_db_connection
from ..agents.agent_service import process_with_openai, save_conversation_log
from app.agents.sub_agent_manager import ai_manager, SubAgent
from app.services.webhook_service import WebhookService
import openai

webhooks_bp = Blueprint('webhooks', __name__)

webhook_service = WebhookService()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á webhooks ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
def create_webhooks_table():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á webhooks ‡πÉ‡∏´‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ agents
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS webhooks (
                id INT AUTO_INCREMENT PRIMARY KEY,
                agency_name VARCHAR(255) NOT NULL,
                webhook_url VARCHAR(255) NOT NULL,
                line_access_token TEXT NOT NULL,
                is_active BOOLEAN DEFAULT TRUE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á webhook_agents ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á webhook ‡πÅ‡∏•‡∏∞ agent
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS webhook_agents (
                id INT AUTO_INCREMENT PRIMARY KEY,
                webhook_id INT NOT NULL,
                agent_id INT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (webhook_id) REFERENCES webhooks(id) ON DELETE CASCADE,
                FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE,
                UNIQUE KEY unique_webhook_agent (webhook_id, agent_id)
            )
        """)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á webhook_logs
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS webhook_logs (
                id INT AUTO_INCREMENT PRIMARY KEY,
                webhook_id INT,
                request_data TEXT,
                response_data TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (webhook_id) REFERENCES webhooks(id) ON DELETE CASCADE
            )
        """)

        conn.commit()
        cursor.close()
        conn.close()

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á: {str(e)}")

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
create_webhooks_table()

@webhooks_bp.route('/create_webhook', methods=['GET', 'POST'])
def create_webhook_page():
    return render_template('create_webhook.html')

@webhooks_bp.route('/api/webhooks/create', methods=['POST'])
def create_webhook_api():
    """‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Webhook ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö NGROK ‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏≤‡∏¢ Agent"""
    try:
        data = request.get_json()
        logging.info(f"üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {data}")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        required_fields = ['agency_name', 'sub_agents', 'line_access_token']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'error': f'‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å {field}'}), 400

        agency_name = data['agency_name'].strip()
        sub_agents = data['sub_agents']
        line_access_token = data['line_access_token'].strip()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ sub_agents ‡πÄ‡∏õ‡πá‡∏ô list ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 1 ‡∏ï‡∏±‡∏ß
        if not isinstance(sub_agents, list) or len(sub_agents) == 0:
            return jsonify({'error': '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å agent ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß'}), 400

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö NGROK URL
        ngrok_url = os.getenv("NGROK_URL", "http://127.0.0.1:5000")  # ‡πÉ‡∏ä‡πâ localhost ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤

        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor.execute("SELECT id, webhook_url FROM webhooks WHERE agency_name = %s", (agency_name,))
        existing_webhook = cursor.fetchone()

        webhook_uuid = str(uuid.uuid4())
        webhook_url = f"{ngrok_url}/webhook/{webhook_uuid}"
        sub_agents_json = json.dumps(sub_agents)  # ‚úÖ ‡πÉ‡∏ä‡πâ JSON ‡πÉ‡∏ô `webhooks`

        if existing_webhook:
            # ‚úÖ **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Webhook ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß**
            cursor.execute("""
                UPDATE webhooks
                SET sub_agents = %s, line_access_token = %s, updated_at = NOW()
                WHERE agency_name = %s
            """, (sub_agents_json, line_access_token, agency_name))
            webhook_id = existing_webhook['id']  # ‡πÉ‡∏ä‡πâ ID ‡πÄ‡∏î‡∏¥‡∏°
            webhook_url = existing_webhook['webhook_url']  # ‡πÉ‡∏ä‡πâ URL ‡πÄ‡∏î‡∏¥‡∏°
            action = "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Webhook ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        else:
            # ‚úÖ **‡∏™‡∏£‡πâ‡∏≤‡∏á Webhook ‡πÉ‡∏´‡∏°‡πà**
            cursor.execute("""
                INSERT INTO webhooks (agency_name, webhook_url, sub_agents, line_access_token, created_at)
                VALUES (%s, %s, %s, %s, NOW())
            """, (agency_name, webhook_url, sub_agents_json, line_access_token))
            webhook_id = cursor.lastrowid  # ‡∏î‡∏∂‡∏á ID ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
            action = "‡∏™‡∏£‡πâ‡∏≤‡∏á Webhook ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"

        # ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ agent_id ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô `agents`
        valid_agent_ids = []
        for agent_id in sub_agents:
            cursor.execute("SELECT id FROM agents WHERE id = %s", (agent_id,))
            agent = cursor.fetchone()
            if agent:
                valid_agent_ids.append(agent['id'])

        print(f"‚úÖ Debug: agent_id ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á = {valid_agent_ids}")  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤ agent_id ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

        # ‚úÖ 2. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß INSERT ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ agent_id ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        cursor.execute("DELETE FROM webhook_agents WHERE webhook_id = %s", (webhook_id,))
        for agent_id in valid_agent_ids:
            cursor.execute("INSERT INTO webhook_agents (webhook_id, agent_id) VALUES (%s, %s)", (webhook_id, agent_id))

        conn.commit()
        cursor.close()
        conn.close()

        logging.info(f"‚úÖ {action}: {webhook_url}")
        return jsonify({
            'message': action,
            'webhook_url': webhook_url,
            'sub_agents': valid_agent_ids  # ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ agent_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        }), 201

    except Exception as e:
        logging.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return jsonify({'error': f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}), 500

@webhooks_bp.route('/api/webhooks/toggle/<int:webhook_id>', methods=['POST'])
def toggle_webhook_status(webhook_id):
    """‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Webhook"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Webhook ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor.execute("SELECT id, is_active FROM webhooks WHERE id = %s", (webhook_id,))
        webhook = cursor.fetchone()

        if not webhook:
            cursor.close()
            conn.close()
            return jsonify({'error': '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Webhook'}), 404

        print(f"üîç ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: Webhook ID {webhook_id} | is_active = {webhook['is_active']}")  # ‚úÖ Debug

        # ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        new_status = not webhook['is_active']
        cursor.execute("UPDATE webhooks SET is_active = %s WHERE id = %s", (new_status, webhook_id))

        conn.commit()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        cursor.execute("SELECT is_active FROM webhooks WHERE id = %s", (webhook_id,))
        updated_webhook = cursor.fetchone()
        print(f"‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: Webhook ID {webhook_id} | is_active = {updated_webhook['is_active']}")  # ‚úÖ Debug

        cursor.close()
        conn.close()

        return jsonify({
            'message': f'‚úÖ {"‡πÄ‡∏õ‡∏¥‡∏î" if new_status else "‡∏õ‡∏¥‡∏î"} ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Webhook ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            'is_active': new_status
        }), 200

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return jsonify({'error': f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}), 500

@webhooks_bp.route('/api/webhooks/logs/<int:webhook_id>', methods=['GET'])
def get_webhook_logs(webhook_id):
    """‡∏î‡∏π Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Webhook"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        cursor.execute("""
            SELECT * FROM webhook_logs 
            WHERE webhook_id = %s 
            ORDER BY created_at DESC 
            LIMIT 100
        """, (webhook_id,))
        
        logs = cursor.fetchall()
        cursor.close()
        conn.close()

        return jsonify(logs), 200

    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return jsonify({'error': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}), 500

@webhooks_bp.route('/api/webhooks', methods=['GET'])
def get_webhooks():
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Webhooks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• webhook ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠ agent
        cursor.execute("""
            SELECT w.*, GROUP_CONCAT(a.agent_name) as agent_names
            FROM webhooks w
            LEFT JOIN webhook_agents wa ON w.id = wa.webhook_id
            LEFT JOIN agents a ON wa.agent_id = a.id
            GROUP BY w.id
        """)
        webhooks = cursor.fetchall()
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        for webhook in webhooks:
            if webhook['created_at']:
                webhook['created_at'] = webhook['created_at'].strftime('%Y-%m-%d %H:%M:%S')
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ agent ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Agent"
            if webhook['agent_names'] is None:
                webhook['agent_name'] = "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Agent"
            else:
                webhook['agent_name'] = webhook['agent_names']
            
            del webhook['agent_names']  # ‡∏•‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        
        cursor.close()
        conn.close()
        
        return jsonify(webhooks), 200
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return jsonify({'error': f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}), 500

@webhooks_bp.route('/api/agents', methods=['GET'])
def get_agents_list():
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ AI Agents ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        cursor.execute("SELECT id, agent_name FROM agents ORDER BY agent_name")
        agents = cursor.fetchall()

        cursor.close()
        conn.close()

        return jsonify(agents), 200

    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return jsonify({'error': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}), 500

@webhooks_bp.route('/webhook/<webhook_id>', methods=['POST'])
def handle_webhook(webhook_id):
    """‚úÖ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Webhook ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ LINE OA ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 404 ‡∏´‡∏£‡∏∑‡∏≠ 400"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        # üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Webhook ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor.execute("SELECT * FROM webhooks WHERE webhook_url LIKE %s", (f"%{webhook_id}%",))
        webhook = cursor.fetchone()

        if not webhook:
            logging.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Webhook")
            return jsonify({"error": "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Webhook"}), 404  # ‚ùå ‡∏™‡πà‡∏á 404 ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Webhook ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not webhook['is_active']:
            logging.error("‚ùå Webhook ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return jsonify({"error": "‚ùå Webhook ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"}), 400  # ‚ùå LINE OA ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 400 Bad Request

        # üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LINE
        request_data = request.get_json()
        if not request_data or 'events' not in request_data or not request_data['events']:
            return '', 200  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ event ‡∏Å‡πá‡∏à‡∏ö‡πÄ‡∏•‡∏¢

        event = request_data['events'][0]
        if event['type'] != 'message' or event.get('message', {}).get('type') != 'text':
            return '', 200  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£

        # üîç ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ AI Agent ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö Webhook
        sub_agents = json.loads(webhook.get('sub_agents', '[]'))
        if not sub_agents:
            logging.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Agent ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡πÑ‡∏ß‡πâ‡∏Å‡∏±‡∏ö Webhook ‡∏ô‡∏µ‡πâ")
            return '', 200

        # üìå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LINE OA
        user_text = event['message']['text']

        responses = []
        for agent_name in sub_agents:
            cursor.execute("SELECT * FROM agents WHERE agent_name = %s", (agent_name,))
            agent = cursor.fetchone()
            if agent:
                try:
                    messages = [
                        {"role": "system", "content": agent['prompt_template']},
                        {"role": "user", "content": user_text}
                    ]
                    agent_response = process_with_openai(messages)

                    # ‚úÖ Debug ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ response
                    print(f"‚úÖ Debug: agent_response = {agent_response}")

                    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response ‡πÄ‡∏õ‡πá‡∏ô dictionary ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if not isinstance(agent_response, dict):
                        raise ValueError(f"‚ùå OpenAI API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {type(agent_response)} = {agent_response}")

                    ai_message = agent_response.get("message", "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ")
                    responses.append(f"{agent_name}: {ai_message}")
                except Exception as e:
                    logging.error(f"‚ùå OpenAI Error: {str(e)}")

        if not responses:
            return '', 200

        # ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE OA
        reply_token = event['replyToken']
        line_reply_url = "https://api.line.me/v2/bot/message/reply"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {webhook['line_access_token']}"
        }
        body = {
            "replyToken": reply_token,
            "messages": [{"type": "text", "text": "\n".join(responses)}]
        }
        requests.post(line_reply_url, headers=headers, json=body)

        return '', 200

    except Exception as e:
        logging.error(f"‚ùå Webhook Error: {str(e)}")
        return jsonify({'error': f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}), 500  # ‚ùå ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô 500 Internal Server Error

    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()


@webhooks_bp.route('/api/webhooks/update/<int:webhook_id>', methods=['POST'])
def update_webhook_api(webhook_id):
    """‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Webhook"""
    try:
        data = request.get_json()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        required_fields = ['agency_name', 'sub_agents', 'line_access_token']
        for field in required_fields:
            if field not in data:
                return jsonify({'error': f'‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å {field}'}), 400

        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ webhook ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        cursor.execute("SELECT id FROM webhooks WHERE id = %s", (webhook_id,))
        webhook = cursor.fetchone()
        if not webhook:
            cursor.close()
            conn.close()
            return jsonify({'error': '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö webhook ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'}), 404

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• webhook
        cursor.execute("""
            UPDATE webhooks 
            SET agency_name = %s,
                line_access_token = %s
            WHERE id = %s
        """, (data['agency_name'], data['line_access_token'], webhook_id))

        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• webhook_agents ‡πÄ‡∏Å‡πà‡∏≤
        cursor.execute("DELETE FROM webhook_agents WHERE webhook_id = %s", (webhook_id,))

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• webhook_agents ‡πÉ‡∏´‡∏°‡πà
        for agent_id in data['sub_agents']:
            cursor.execute("""
                INSERT INTO webhook_agents (webhook_id, agent_id)
                VALUES (%s, %s)
            """, (webhook_id, agent_id))

        conn.commit()
        cursor.close()
        conn.close()

        return jsonify({'message': '‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï webhook ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}), 200

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return jsonify({'error': f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}), 500

@webhooks_bp.route('/dashboard')
def dashboard():
    """‡∏´‡∏ô‡πâ‡∏≤ Dashboard"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• webhooks ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠ agents ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        cursor.execute("""
            SELECT w.*, GROUP_CONCAT(a.agent_name) as agent_names
            FROM webhooks w
            LEFT JOIN webhook_agents wa ON w.id = wa.webhook_id
            LEFT JOIN agents a ON wa.agent_id = a.id
            GROUP BY w.id
        """)
        webhooks = cursor.fetchall()

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents
        cursor.execute("SELECT * FROM agents")
        agents = cursor.fetchall()

        cursor.close()
        conn.close()

        return render_template('dashboard.html', webhooks=webhooks, agents=agents)

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return jsonify({'error': f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}), 500

@webhooks_bp.route('/webhook/<webhook_name>', methods=['POST'])
def webhook_handler(webhook_name):
    data = request.json
    user_input = data.get("message", "")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ webhook ‡∏ô‡∏µ‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö agent ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    assigned_agent = webhook_service.get_assigned_agent(webhook_name)
    
    if assigned_agent:
        response = ai_manager.process_request(assigned_agent, user_input)
    else:
        response = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ Webhook ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö Agent ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ"
    
    return jsonify({"response": response})

@webhooks_bp.route('/webhook/<uuid>', methods=['POST'])
def webhook(uuid):
    """‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å LINE OA ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ AI Agent ‡∏ï‡∏≠‡∏ö"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        # üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• webhook ‡πÅ‡∏•‡∏∞ agent
        cursor.execute("""
            SELECT w.*, GROUP_CONCAT(a.id) as agent_ids, GROUP_CONCAT(a.name) as agent_names,
            GROUP_CONCAT(a.prompt_template) as prompt_templates, w.line_access_token
            FROM webhooks w
            LEFT JOIN webhook_agents wa ON w.id = wa.webhook_id
            LEFT JOIN agents a ON wa.agent_id = a.id
            WHERE w.webhook_url LIKE %s
            GROUP BY w.id
        """, (f'%{uuid}%',))

        webhook_data = cursor.fetchone()

        if not webhook_data:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö webhook")
            return 'Webhook not found', 404

        if not webhook_data['is_active']:
            print("‚ùå Webhook ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return 'Webhook is inactive', 400

        # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LINE
        data = request.get_json()
        print(f"üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LINE: {json.dumps(data, ensure_ascii=False, indent=2)}")

        events = data.get('events', [])
        if not events:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö events")
            return 'No events', 200

        for event in events:
            if event['type'] != 'message' or event['message']['type'] != 'text':
                continue

            user_message = event['message']['text']
            reply_token = event['replyToken']

            print(f"üë§ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user_message}")
            print(f"üîë Reply Token: {reply_token}")

            # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á messages array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenAI
            messages = [
                {"role": "system", "content": webhook_data['prompt_templates'].split(',')[0]},
                {"role": "user", "content": user_message}
            ]

            try:
                # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ OpenAI API
                if not isinstance(messages, list):
                    raise ValueError(f"‚ùå messages ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô list ‡πÅ‡∏ï‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤: {type(messages)}")

                start_time = datetime.now()
                openai_response = process_with_openai(messages)
                response_time = (datetime.now() - start_time).total_seconds()

                if not isinstance(openai_response, dict):
                    raise ValueError(f"‚ùå OpenAI API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {openai_response}")

                ai_message = openai_response['message'].strip()
                print(f"ü§ñ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å AI: {ai_message}")

                # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
                save_conversation_log(
                    agent_name=webhook_data['agent_names'].split(',')[0],
                    message=user_message,
                    response=ai_message,
                    response_time=response_time,
                    status='success',
                    usage_data=openai_response.get('usage', {}),
                    model=openai_response.get('model', 'unknown')
                )

                # ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE OA
                line_bot_api = LineBotApi(webhook_data['line_access_token'])
                line_bot_api.reply_message(
                    reply_token,
                    TextSendMessage(text=ai_message)
                )

                print(f"‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

                # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å webhook log
                cursor.execute("""
                    INSERT INTO webhook_logs (webhook_id, request_data, response_data)
                    VALUES (%s, %s, %s)
                """, (
                    webhook_data['id'],
                    json.dumps({"message": user_message}, ensure_ascii=False),
                    json.dumps({"response": ai_message}, ensure_ascii=False)
                ))
                conn.commit()

            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {str(e)}")

                # ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
                try:
                    line_bot_api.reply_message(
                        reply_token,
                        TextSendMessage(text="‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                    )
                except Exception as line_error:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE: {str(line_error)}")

        cursor.close()
        conn.close()
        return 'OK', 200

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô webhook: {str(e)}")
        return 'Error', 500

@webhooks_bp.route('/api/webhooks/delete/<int:webhook_id>', methods=['DELETE'])
def delete_webhook(webhook_id):
    """‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö Webhook"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Webhook ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor.execute("SELECT id FROM webhooks WHERE id = %s", (webhook_id,))
        webhook = cursor.fetchone()

        if not webhook:
            cursor.close()
            conn.close()
            return jsonify({'error': '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Webhook'}), 404

        # ‡∏•‡∏ö webhook_agents ‡∏Å‡πà‡∏≠‡∏ô (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ ON DELETE CASCADE)
        cursor.execute("DELETE FROM webhooks WHERE id = %s", (webhook_id,))
        conn.commit()

        cursor.close()
        conn.close()

        return jsonify({'message': '‚úÖ ‡∏•‡∏ö Webhook ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}), 200

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return jsonify({'error': f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}), 500

@webhooks_bp.route('/edit_webhook/<int:webhook_id>', methods=['GET'])
def edit_webhook_page(webhook_id):
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Webhook"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• webhook
        cursor.execute("""
            SELECT w.*, GROUP_CONCAT(wa.agent_id) as agent_ids
            FROM webhooks w
            LEFT JOIN webhook_agents wa ON w.id = wa.webhook_id
            WHERE w.id = %s
            GROUP BY w.id
        """, (webhook_id,))
        webhook = cursor.fetchone()

        if not webhook:
            cursor.close()
            conn.close()
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö webhook", 404

        # ‡πÅ‡∏õ‡∏•‡∏á agent_ids ‡πÄ‡∏õ‡πá‡∏ô list
        if webhook['agent_ids']:
            webhook['agent_ids'] = [int(id) for id in webhook['agent_ids'].split(',')]
        else:
            webhook['agent_ids'] = []

        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ agents ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        cursor.execute("SELECT * FROM agents")
        agents = cursor.fetchall()

        cursor.close()
        conn.close()

        return render_template('edit_webhook.html', webhook=webhook, agents=agents)

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return str(e), 500