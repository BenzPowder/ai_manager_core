from flask import Blueprint, request, jsonify, render_template
from app.services.sub_agent_service import SubAgentService
from app.agents.sub_agent_manager import ai_manager
import logging
from app.database.db_connection import get_db_connection

agents_bp = Blueprint('agents', __name__)
agent_service = SubAgentService()

# API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Response
@agents_bp.route('/api/agents/test', methods=['POST'])
def test_ai():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á AI Agent"""
    try:
        data = request.json
        if not data or 'prompt' not in data:
            return jsonify({'error': '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö'}), 400

        user_input = data['prompt']
        
        # ‡∏î‡∏∂‡∏á agent ‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT agent_name FROM agents LIMIT 1")
        agent = cursor.fetchone()
        cursor.close()
        conn.close()

        if not agent:
            return jsonify({'error': '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö AI Agent ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á Agent ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö'}), 404

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ agent_service
        result = agent_service.process_message(agent['agent_name'], user_input)
        
        # Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ result
        print(f"‚úÖ Debug test_ai() result: {result}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ result ‡πÄ‡∏õ‡πá‡∏ô dict ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if isinstance(result, str):
            return jsonify({'response': result}), 200
            
        if isinstance(result, dict):
            if 'error' in result:
                return jsonify({'error': result['error']}), 500
            if 'response' in result:
                return jsonify({'response': result['response']}), 200
                
        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏î‡πÜ
        return jsonify({'error': '‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'}), 500

    except Exception as e:
        error_message = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
        print(error_message)
        return jsonify({'error': error_message}), 500

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ UI ‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI
@agents_bp.route('/test')
def test_ai_page():
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Agent"""
    return render_template('test_ai.html')

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á Agent
@agents_bp.route('/create_agent')
def create_agent_page():
    return render_template('create_agent.html')

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Agent
@agents_bp.route('/agents/edit/<int:agent_id>')
def edit_agent_page(agent_id):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    cursor.execute("SELECT * FROM agents WHERE id = %s", (agent_id,))
    agent = cursor.fetchone()

    cursor.close()
    conn.close()

    if not agent:
        return "Agent not found", 404

    return render_template('edit_agent.html', agent=agent)

@agents_bp.route('/api/agents/create', methods=['POST'])
def create_agent():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á AI Agent ‡πÉ‡∏´‡∏°‡πà"""
    try:
        data = request.get_json()
        print("üîπ Received Data:", data)  # ‚úÖ Debug ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Frontend
        
        if not data:
            return jsonify({'error': '‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Client'}), 400

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        required_fields = ['agent_name', 'agent_type', 'prompt_template']
        for field in required_fields:
            if field not in data or not data[field]:
                return jsonify({'error': f'‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å {field}'}), 400

        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ agent ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor.execute("SELECT id FROM agents WHERE agent_name = %s", (data['agent_name'],))
        if cursor.fetchone():
            cursor.close()
            conn.close()
            return jsonify({'error': '‚ùå ‡∏°‡∏µ Agent ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß'}), 400

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agent ‡πÉ‡∏´‡∏°‡πà
        cursor.execute("""
            INSERT INTO agents (agent_name, agent_type, prompt_template)
            VALUES (%s, %s, %s)
        """, (data['agent_name'], data['agent_type'], data['prompt_template']))
        
        conn.commit()
        cursor.close()
        conn.close()

        print("‚úÖ Agent Created Successfully:", data['agent_name'])
        return jsonify({'message': '‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Agent ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}), 201

    except Exception as e:
        print("‚ùå Error:", str(e))
        return jsonify({'error': f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Agent: {str(e)}'}), 500


@agents_bp.route('/api/agents', methods=['GET'])
def get_agents():
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ AI Agents ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        
        cursor.execute("SELECT * FROM agents")
        agents = cursor.fetchall()
        
        cursor.close()
        conn.close()
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string
        for agent in agents:
            if 'created_at' in agent:
                agent['created_at'] = agent['created_at'].strftime('%Y-%m-%d %H:%M:%S')
        
        return jsonify(agents), 200
    except Exception as e:
        logging.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Agents: {e}")
        return jsonify({'error': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Agents'}), 500

@agents_bp.route('/api/agents/<agent_name>', methods=['GET'])
def get_agent(agent_name):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI Agent ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        
        cursor.execute("SELECT * FROM agents WHERE agent_name = %s", (agent_name,))
        agent = cursor.fetchone()
        
        cursor.close()
        conn.close()
        
        if agent:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string
            if 'created_at' in agent:
                agent['created_at'] = agent['created_at'].strftime('%Y-%m-%d %H:%M:%S')
            return jsonify(agent), 200
        else:
            return jsonify({'error': '‡πÑ‡∏°‡πà‡∏û‡∏ö Agent'}), 404
    except Exception as e:
        logging.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Agent: {e}")
        return jsonify({'error': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Agent'}), 500

@agents_bp.route('/api/agents/update/<int:agent_id>', methods=['PUT'])
def update_agent(agent_id):
    try:
        data = request.get_json()

        if not data.get("agent_name") or not data.get("agent_type") or not data.get("prompt_template"):
            return jsonify({'error': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'}), 400

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("""
            UPDATE agents SET agent_name = %s, agent_type = %s, prompt_template = %s
            WHERE id = %s
        """, (data["agent_name"], data["agent_type"], data["prompt_template"], agent_id))

        conn.commit()
        cursor.close()
        conn.close()

        return jsonify({'message': '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Agent ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}), 200

    except Exception as e:
        return jsonify({'error': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}), 500

@agents_bp.route('/agents/delete/<int:agent_id>', methods=['DELETE'])
def delete_agent(agent_id):
    """‡∏•‡∏ö AI Agent ‡∏ï‡∏≤‡∏° ID"""
    try:
        print(f"üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö Agent ID: {agent_id}")  # Debug log
        
        conn = get_db_connection()
        cursor = conn.cursor()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ agent ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        cursor.execute("SELECT id FROM agents WHERE id = %s", (agent_id,))
        agent = cursor.fetchone()
        
        if not agent:
            cursor.close()
            conn.close()
            return jsonify({'error': '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Agent ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö'}), 404

        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô webhook_agents ‡∏Å‡πà‡∏≠‡∏ô
        cursor.execute("DELETE FROM webhook_agents WHERE agent_id = %s", (agent_id,))
        
        # ‡∏•‡∏ö agent
        cursor.execute("DELETE FROM agents WHERE id = %s", (agent_id,))
        conn.commit()
        
        cursor.close()
        conn.close()
        
        print(f"‚úÖ ‡∏•‡∏ö Agent ID: {agent_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")  # Debug log
        return jsonify({'message': '‚úÖ ‡∏•‡∏ö Agent ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}), 200

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Agent: {str(e)}")  # Debug log
        return jsonify({'error': f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}), 500
