import mysql.connector
import os
import openai
import json
from datetime import datetime
from app.agents.sub_agent_manager import SubAgentManager
from app.services.sub_agent_service import SubAgentService

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL (XAMPP)
def get_db_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="ai_orchestration_local"
    )

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenAI API Key
openai.api_key = os.getenv("OPENAI_API_KEY")

def save_conversation_log(agent_name, message, response, response_time, status='success', usage_data=None, model=None, error=None, test=False):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö OpenAI

    Args:
        agent_name (str): ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á agent
        message (str): ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ
        response (str): ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        response_time (float): ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        status (str, optional): ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö. Defaults to 'success'.
        usage_data (dict, optional): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô token. Defaults to None.
        model (str, optional): ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ. Defaults to None.
        error (str, optional): ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ. Defaults to None.
        test (bool, optional): ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà. Defaults to False.
    """
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS conversation_logs (
                id INT AUTO_INCREMENT PRIMARY KEY,
                agent_name VARCHAR(255),
                message TEXT,
                response TEXT,
                response_time FLOAT,
                status VARCHAR(50),
                usage_data JSON,
                model VARCHAR(50),
                error TEXT,
                test BOOLEAN,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.commit()

        # ‡πÅ‡∏õ‡∏•‡∏á usage_data ‡πÄ‡∏õ‡πá‡∏ô JSON string ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        usage_json = json.dumps(usage_data) if usage_data else None

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
        cursor.execute("""
            INSERT INTO conversation_logs 
            (agent_name, message, response, response_time, status, usage_data, model, error, test)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            agent_name,
            message,
            response,
            response_time,
            status,
            usage_json,
            model,
            error,
            test
        ))
        conn.commit()

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log: {str(e)}")
    finally:
        cursor.close()
        conn.close()

import openai
import json

def process_with_openai(messages):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏µ‡πà OpenAI API"""
    try:
        print(f"üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ OpenAI: {json.dumps(messages, ensure_ascii=False, indent=2)}")

        start_time = datetime.now()
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=0.2,
            max_tokens=300
        )
        response_time = (datetime.now() - start_time).total_seconds()

        # ‡πÅ‡∏õ‡∏•‡∏á response ‡πÄ‡∏õ‡πá‡∏ô dict
        if isinstance(response, str):
            response_dict = json.loads(response)
        else:
            response_dict = response if isinstance(response, dict) else response.to_dict()

        print(f"üìå Response ‡∏à‡∏≤‡∏Å OpenAI: {json.dumps(response_dict, indent=2, ensure_ascii=False)}")

        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å choices[0].message.content
            choices = response_dict["choices"]
            if not choices:
                raise ValueError("‚ùå OpenAI API ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á choices")

            first_choice = choices[0]
            if isinstance(first_choice, str):
                first_choice = json.loads(first_choice)

            message_obj = first_choice["message"]
            if isinstance(message_obj, str):
                message_obj = json.loads(message_obj)

            message_content = message_obj["content"].strip()
            if not message_content:
                raise ValueError("‚ùå OpenAI API ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

            # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ usage_data
            usage_data = {}
            if "usage" in response_dict:
                usage_data = response_dict["usage"]
                if isinstance(usage_data, str):
                    usage_data = json.loads(usage_data)

            result = {
                'message': message_content,
                'usage': usage_data,
                'model': response_dict.get("model", "unknown"),
                'response_time': response_time
            }

            print(f"‚úÖ Debug: process_with_openai() return: {json.dumps(result, ensure_ascii=False, indent=2)}")
            return result

        except (KeyError, IndexError) as e:
            raise ValueError(f"‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OpenAI API ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(e)}")

    except Exception as e:
        error_message = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
        print(error_message)
        return {
            'message': "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á",
            'error': error_message
        }

class AgentService:
    """‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ AI Agent"""

    def __init__(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á AgentService"""
        self._create_table()
        self.sub_agent_manager = SubAgentManager()  # ‡πÉ‡∏ä‡πâ SubAgentManager
        self.agents = {}  # ‡πÄ‡∏Å‡πá‡∏ö agent ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    def test_agent(self, agent_id, message):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö agent ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö

        Args:
            agent_id (str): ID ‡∏Ç‡∏≠‡∏á agent ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            message (str): ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö

        Returns:
            str: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å AI
        """
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agent ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT name, prompt_template, agent_type
                FROM agents
                WHERE id = %s
            """, (agent_id,))
            agent_data = cursor.fetchone()
            cursor.close()
            conn.close()

            if not agent_data:
                return "‡πÑ‡∏°‡πà‡∏û‡∏ö Agent ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"

            name, prompt_template, agent_type = agent_data

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á messages array
            messages = [{
                "role": "system",
                "content": prompt_template or """‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô
                - ‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
                - ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
                - ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡πÜ ‡∏™‡∏±‡πâ‡∏ô‡πÜ
                - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢"""
            }, {
                "role": "user",
                "content": message
            }]

            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ OpenAI API
            start_time = datetime.now()
            response = openai.ChatCompletion.create(
                model="gpt-4o-mini",
                messages=messages,
                temperature=0.3,
                max_tokens=500
            )
            response_time = (datetime.now() - start_time).total_seconds()

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            ai_message = response.choices[0].message.content.strip()
            ai_message = self._format_response(ai_message)

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            save_conversation_log(
                agent_name=name,
                message=message,
                response=ai_message,
                response_time=response_time,
                status='success',
                usage_data=dict(response.usage) if hasattr(response, 'usage') else None,
                model=response.model
            )

            return ai_message

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö agent: {str(e)}")
            error_message = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö agent ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á"
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error log
            save_conversation_log(
                agent_name=name if 'name' in locals() else 'unknown',
                message=message,
                response=None,
                response_time=0,
                status='error',
                error=str(e),
                test=True
            )
            
            return error_message

    def _format_response(self, message):
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°"""
        # ‡∏•‡∏ö markdown format ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        message = message.replace('*', '')  # ‡∏•‡∏ö markdown
        message = message.replace('\\n', '\n')  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç escaped newlines
        message = message.replace('\n\n', '\n')  # ‡∏•‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î

        # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤
        import re
        lines = message.split('\n')
        formatted_lines = []
        
        for line in lines:
            # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠
            line = re.sub(r'(\d+)\. ', r'üìç ‡∏Ç‡πâ‡∏≠ \1: ', line)
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° emoji ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            if "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" in line:
                line = "üîç " + line
            elif "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠" in line:
                line = "üìû " + line
            elif "‡πÅ‡∏à‡πâ‡∏á" in line:
                line = "üì¢ " + line
            elif "‡∏£‡∏≠" in line:
                line = "‚è≥ " + line
            formatted_lines.append(line)

        message = '\n'.join(formatted_lines)
        message = ' '.join(message.split())  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        
        return message

    def _create_table(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI Sub-Agent ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ"""
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS ai_sub_agents (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) UNIQUE,
                sub_agents JSON
            )
        """)
        conn.commit()
        conn.close()

    def create_agent(self, name, sub_agent):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° AI Sub-Agent ‡πÉ‡∏´‡∏°‡πà"""
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute("INSERT INTO ai_sub_agents (name, sub_agents) VALUES (%s, %s)", (name, sub_agent))
            conn.commit()
            print(f" Created AI Sub-Agent: {name} with Sub-Agent: {sub_agent}")
            return {"id": cursor.lastrowid, "name": name, "sub_agent": sub_agent}
        except mysql.connector.Error as e:
            print(f" Database Error: {e}")
        finally:
            conn.close()

    def list_agents(self):
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ AI Sub-Agent ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT id, name, sub_agents FROM ai_sub_agents")
        agents = cursor.fetchall()
        conn.close()
        return agents

    def get_sub_agent(self, agency_name):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ AI Sub-Agent ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö agency_name"""
        print(f" Searching for AI Sub-Agent linked to {agency_name}")
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute("SELECT sub_agents FROM ai_sub_agents WHERE name = %s", (agency_name,))
            row = cursor.fetchone()
        except Exception as e:
            print(f" Database Error: {e}")
            row = None
        finally:
            conn.close()

        if row:
            sub_agent_name = row[0]
            print(f" Found Sub-Agent: {sub_agent_name}")
            return self.sub_agent_manager.get_agent(sub_agent_name)  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Object
        else:
            print(f" No AI Sub-Agent found for {agency_name}")
            return None  # ‡πÑ‡∏°‡πà‡∏°‡∏µ AI Sub-Agent
