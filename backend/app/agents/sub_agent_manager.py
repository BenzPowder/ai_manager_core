import mysql.connector
import os
import openai
import json
from datetime import datetime

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenAI API Key
openai.api_key = os.getenv("OPENAI_API_KEY")

def connect_db():
    """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL"""
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="ai_orchestration_local"
    )

def save_conversation_log(agent_name, request_text, response_text, response_time, status='success', error=None, usage_data=None, model=None):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö AI Agent"""
    conn = connect_db()
    cursor = conn.cursor()
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS agent_performance (
                id INT AUTO_INCREMENT PRIMARY KEY,
                agent_name VARCHAR(255),
                request_text TEXT,
                response_text TEXT,
                response_time FLOAT,
                status VARCHAR(50),
                error TEXT NULL,
                usage_data JSON NULL,
                model VARCHAR(100),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (agent_name) REFERENCES agents(agent_name) ON DELETE CASCADE
            )
        """)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        cursor.execute("""
            INSERT INTO agent_performance 
            (agent_name, request_text, response_text, response_time, status, error, usage_data, model)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            agent_name,
            request_text,
            response_text,
            response_time,
            status,
            error,
            json.dumps(usage_data) if usage_data else None,
            model
        ))
        conn.commit()
        
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡πÑ‡∏î‡πâ: {str(e)}")
    finally:
        cursor.close()
        conn.close()

class SubAgent:
    def __init__(self, name, agent_type=None, prompt_template=None, model="gpt-4o-mini"):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á SubAgent"""
        self.name = name
        self.agent_type = agent_type
        self.prompt_template = prompt_template
        self.model = model
        self.conversation_history = []  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
        
    def process_message(self, message):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö"""
        try:
            messages = []

            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ prompt_template ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if self.prompt_template:
                messages.append({"role": "system", "content": self.prompt_template})
            else:
                messages.append({
                    "role": "system", 
                    "content": """‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô
                    - ‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
                    - ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
                    - ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡πÜ ‡∏™‡∏±‡πâ‡∏ô‡πÜ
                    - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢"""
                })

            # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
            for msg in self.conversation_history[-5:]:
                messages.append(msg)

            # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            messages.append({"role": "user", "content": message})

            print(f"üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ OpenAI: {json.dumps(messages, indent=2, ensure_ascii=False)}")

            start_time = datetime.now()
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=messages,
                temperature=0.3,
                max_tokens=500
            )
            response_time = (datetime.now() - start_time).total_seconds()

            # ‡πÅ‡∏õ‡∏•‡∏á response ‡πÄ‡∏õ‡πá‡∏ô dict
            if isinstance(response, str):
                response_dict = json.loads(response)
            else:
                response_dict = response if isinstance(response, dict) else response.to_dict()

            print(f"üìå Response ‡∏à‡∏≤‡∏Å OpenAI: {json.dumps(response_dict, indent=2, ensure_ascii=False)}")

            try:
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å choices[0].message.content
                choices = response_dict["choices"]
                if not choices:
                    raise ValueError("‚ùå OpenAI API ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á choices")

                first_choice = choices[0]
                if isinstance(first_choice, str):
                    first_choice = json.loads(first_choice)

                message_obj = first_choice["message"]
                if isinstance(message_obj, str):
                    message_obj = json.loads(message_obj)

                ai_message = message_obj["content"].strip()
                if not ai_message:
                    raise ValueError("‚ùå OpenAI API ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
                self.conversation_history.append({"role": "assistant", "content": ai_message})

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
                usage_data = {}
                if "usage" in response_dict:
                    usage_data = response_dict["usage"]
                    if isinstance(usage_data, str):
                        usage_data = json.loads(usage_data)

                save_conversation_log(
                    agent_name=self.name,
                    request_text=message,
                    response_text=ai_message,
                    response_time=response_time,
                    status='success',
                    usage_data=usage_data,
                    model=response_dict.get("model", "unknown")
                )

                return ai_message

            except (KeyError, IndexError) as e:
                error_message = f"‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OpenAI API ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(e)}"
                save_conversation_log(
                    agent_name=self.name,
                    request_text=message,
                    response_text=None,
                    response_time=0,
                    status='error',
                    error=error_message
                )
                return error_message

        except Exception as e:
            error_message = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
            print(error_message)
            
            save_conversation_log(
                agent_name=self.name,
                request_text=message,
                response_text=None,
                response_time=0,
                status='error',
                error=str(e)
            )
            
            return error_message

    def _format_response(self, message):
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å AI"""
        try:
            # ‡∏•‡∏ö markdown format
            message = message.replace('*', '')
            message = message.replace('\\n', '\n')
            message = message.replace('\n\n', '\n')

            # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤
            import re
            lines = message.split('\n')
            formatted_lines = []
            
            for line in lines:
                # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠
                line = re.sub(r'(\d+)\. ', r'üìç ‡∏Ç‡πâ‡∏≠ \1: ', line)
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° emoji ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
                if "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" in line:
                    line = "üîç " + line
                elif "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠" in line:
                    line = "üìû " + line
                elif "‡πÅ‡∏à‡πâ‡∏á" in line:
                    line = "üì¢ " + line
                elif "‡∏£‡∏≠" in line:
                    line = "‚è≥ " + line
                formatted_lines.append(line)

            message = '\n'.join(formatted_lines)
            return ' '.join(message.split())  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {str(e)}")
            return message  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°

    def _log_prompt_change(self, old_prompt, new_prompt):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á prompt template"""
        print(f"üîÑ Prompt template ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å: {old_prompt} ‡πÄ‡∏õ‡πá‡∏ô: {new_prompt}")

    def update_prompt(self, new_prompt):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï prompt template"""
        if new_prompt != self.prompt_template:
            self._log_prompt_change(self.prompt_template, new_prompt)
            self.prompt_template = new_prompt

    @staticmethod
    def get_agent_performance(agent_name):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á agent"""
        conn = connect_db()
        cursor = conn.cursor()
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_requests,
                    AVG(response_time) as avg_response_time,
                    SUM(CASE WHEN status = 'success' THEN 1 ELSE 0 END) as capable_requests,
                    SUM(CASE WHEN status = 'error' THEN 1 ELSE 0 END) as non_capable_requests
                FROM agent_performance
                WHERE agent_name = %s
            """, (agent_name,))
            
            result = cursor.fetchone()
            if result:
                return {
                    'total_requests': result[0],
                    'avg_response_time': float(result[1]) if result[1] else 0,
                    'capable_requests': result[2],
                    'non_capable_requests': result[3]
                }
            return {
                'total_requests': 0,
                'avg_response_time': 0,
                'capable_requests': 0,
                'non_capable_requests': 0
            }
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: {str(e)}")
            return None
        finally:
            cursor.close()
            conn.close()

class SubAgentManager:
    def __init__(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á SubAgentManager"""
        self.agents = {}
    
    def create_agent(self, name, agent_type=None, prompt_template=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á SubAgent ‡πÉ‡∏´‡∏°‡πà"""
        self.agents[name] = SubAgent(name, agent_type, prompt_template)
        return self.agents[name]
    
    def get_agent(self, name):
        """‡∏î‡∏∂‡∏á SubAgent ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠"""
        return self.agents.get(name)
    
    def list_agents(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ SubAgent ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        return list(self.agents.keys())

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á SubAgentManager
ai_manager = SubAgentManager()
